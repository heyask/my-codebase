"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/apollo-upload-client";
exports.ids = ["vendor-chunks/apollo-upload-client"];
exports.modules = {

/***/ "(ssr)/../../node_modules/apollo-upload-client/createUploadLink.mjs":
/*!********************************************************************!*\
  !*** ../../node_modules/apollo-upload-client/createUploadLink.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ createUploadLink)\n/* harmony export */ });\n/* harmony import */ var _apollo_client_link_core_ApolloLink_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client/link/core/ApolloLink.js */ \"(ssr)/../../node_modules/@apollo/client/link/core/ApolloLink.js\");\n/* harmony import */ var _apollo_client_link_http_createSignalIfSupported_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @apollo/client/link/http/createSignalIfSupported.js */ \"(ssr)/../../node_modules/@apollo/client/link/http/createSignalIfSupported.js\");\n/* harmony import */ var _apollo_client_link_http_parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @apollo/client/link/http/parseAndCheckHttpResponse.js */ \"(ssr)/../../node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js\");\n/* harmony import */ var _apollo_client_link_http_rewriteURIForGET_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @apollo/client/link/http/rewriteURIForGET.js */ \"(ssr)/../../node_modules/@apollo/client/link/http/rewriteURIForGET.js\");\n/* harmony import */ var _apollo_client_link_http_selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client/link/http/selectHttpOptionsAndBody.js */ \"(ssr)/../../node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js\");\n/* harmony import */ var _apollo_client_link_http_selectURI_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @apollo/client/link/http/selectURI.js */ \"(ssr)/../../node_modules/@apollo/client/link/http/selectURI.js\");\n/* harmony import */ var _apollo_client_link_http_serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @apollo/client/link/http/serializeFetchParameter.js */ \"(ssr)/../../node_modules/@apollo/client/link/http/serializeFetchParameter.js\");\n/* harmony import */ var _apollo_client_utilities_observables_Observable_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @apollo/client/utilities/observables/Observable.js */ \"(ssr)/../../node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var extract_files_extractFiles_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! extract-files/extractFiles.mjs */ \"(ssr)/../../node_modules/extract-files/extractFiles.mjs\");\n/* harmony import */ var _formDataAppendFile_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formDataAppendFile.mjs */ \"(ssr)/../../node_modules/apollo-upload-client/formDataAppendFile.mjs\");\n/* harmony import */ var _isExtractableFile_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isExtractableFile.mjs */ \"(ssr)/../../node_modules/extract-files/isExtractableFile.mjs\");\n// @ts-check\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Creates a\n * [terminating Apollo Link](https://www.apollographql.com/docs/react/api/link/introduction/#the-terminating-link)\n * for [Apollo Client](https://www.apollographql.com/docs/react) that fetches a\n * [GraphQL multipart request](https://github.com/jaydenseric/graphql-multipart-request-spec)\n * if the GraphQL variables contain files (by default\n * [`FileList`](https://developer.mozilla.org/en-US/docs/Web/API/FileList),\n * [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File), or\n * [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) instances),\n * or else fetches a regular\n * [GraphQL POST or GET request](https://www.apollographql.com/docs/apollo-server/workflow/requests)\n * (depending on the config and GraphQL operation).\n *\n * Some of the options are similar to the\n * [`createHttpLink` options](https://www.apollographql.com/docs/react/api/link/apollo-link-http/#httplink-constructor-options).\n * @see [GraphQL multipart request spec](https://github.com/jaydenseric/graphql-multipart-request-spec).\n * @param {object} options Options.\n * @param {Parameters<typeof selectURI>[1]} [options.uri] GraphQL endpoint URI.\n *   Defaults to `\"/graphql\"`.\n * @param {boolean} [options.useGETForQueries] Should GET be used to fetch\n *   queries, if there are no files to upload.\n * @param {ExtractableFileMatcher} [options.isExtractableFile] Matches\n *   extractable files in the GraphQL operation. Defaults to\n *   {@linkcode isExtractableFile}.\n * @param {typeof FormData} [options.FormData]\n *   [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n *   class. Defaults to the {@linkcode FormData} global.\n * @param {FormDataFileAppender} [options.formDataAppendFile]\n *   Customizes how extracted files are appended to the\n *   [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n *   instance. Defaults to {@linkcode formDataAppendFile}.\n * @param {import(\"@apollo/client/link/http/selectHttpOptionsAndBody.js\").Printer} [options.print]\n *   Prints the GraphQL query or mutation AST to a string for transport.\n *   Defaults to {@linkcode defaultPrinter}.\n * @param {typeof fetch} [options.fetch] [`fetch`](https://fetch.spec.whatwg.org)\n *   implementation. Defaults to the {@linkcode fetch} global.\n * @param {RequestInit} [options.fetchOptions] `fetch` options; overridden by\n *   upload requirements.\n * @param {string} [options.credentials] Overrides\n *   {@linkcode RequestInit.credentials credentials} in\n *   {@linkcode fetchOptions}.\n * @param {{ [headerName: string]: string }} [options.headers] Merges with and\n *   overrides {@linkcode RequestInit.headers headers} in\n *   {@linkcode fetchOptions}.\n * @param {boolean} [options.includeExtensions] Toggles sending `extensions`\n *   fields to the GraphQL server. Defaults to `false`.\n * @returns A [terminating Apollo Link](https://www.apollographql.com/docs/react/api/link/introduction/#the-terminating-link).\n * @example\n * A basic Apollo Client setup:\n *\n * ```js\n * import { ApolloClient, InMemoryCache } from \"@apollo/client\";\n * import createUploadLink from \"apollo-upload-client/createUploadLink.mjs\";\n *\n * const client = new ApolloClient({\n *   cache: new InMemoryCache(),\n *   link: createUploadLink(),\n * });\n * ```\n */\nfunction createUploadLink({\n  uri: fetchUri = \"/graphql\",\n  useGETForQueries,\n  isExtractableFile: customIsExtractableFile = _isExtractableFile_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n  FormData: CustomFormData,\n  formDataAppendFile: customFormDataAppendFile = _formDataAppendFile_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  print = _apollo_client_link_http_selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_2__.defaultPrinter,\n  fetch: customFetch,\n  fetchOptions,\n  credentials,\n  headers,\n  includeExtensions,\n} = {}) {\n  const linkConfig = {\n    http: { includeExtensions },\n    options: fetchOptions,\n    credentials,\n    headers,\n  };\n\n  return new _apollo_client_link_core_ApolloLink_js__WEBPACK_IMPORTED_MODULE_3__.ApolloLink((operation) => {\n    const context =\n      /**\n       * @type {import(\"@apollo/client/core/types.js\").DefaultContext & {\n       *   clientAwareness?: {\n       *     name?: string,\n       *     version?: string,\n       *   },\n       * }}\n       */\n      (operation.getContext());\n    const {\n      // Apollo Studio client awareness `name` and `version` can be configured\n      // via `ApolloClient` constructor options:\n      // https://www.apollographql.com/docs/graphos/metrics/client-awareness/#setup\n      clientAwareness: { name, version } = {},\n      headers,\n    } = context;\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: {\n        // Client awareness headers can be overridden by context `headers`.\n        ...(name && { \"apollographql-client-name\": name }),\n        ...(version && { \"apollographql-client-version\": version }),\n        ...headers,\n      },\n    };\n\n    const { options, body } = (0,_apollo_client_link_http_selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_2__.selectHttpOptionsAndBodyInternal)(\n      operation,\n      print,\n      _apollo_client_link_http_selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_2__.fallbackHttpConfig,\n      linkConfig,\n      contextConfig,\n    );\n\n    const { clone, files } = (0,extract_files_extractFiles_mjs__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(body, customIsExtractableFile, \"\");\n\n    let uri = (0,_apollo_client_link_http_selectURI_js__WEBPACK_IMPORTED_MODULE_5__.selectURI)(operation, fetchUri);\n\n    if (files.size) {\n      if (options.headers)\n        // Automatically set by `fetch` when the `body` is a `FormData` instance.\n        delete options.headers[\"content-type\"];\n\n      // GraphQL multipart request spec:\n      // https://github.com/jaydenseric/graphql-multipart-request-spec\n\n      const RuntimeFormData = CustomFormData || FormData;\n\n      const form = new RuntimeFormData();\n\n      form.append(\"operations\", (0,_apollo_client_link_http_serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_6__.serializeFetchParameter)(clone, \"Payload\"));\n\n      /** @type {{ [key: string]: Array<string> }} */\n      const map = {};\n\n      let i = 0;\n      files.forEach((paths) => {\n        map[++i] = paths;\n      });\n      form.append(\"map\", JSON.stringify(map));\n\n      i = 0;\n      files.forEach((_paths, file) => {\n        customFormDataAppendFile(form, String(++i), file);\n      });\n\n      options.body = form;\n    } else {\n      if (\n        useGETForQueries &&\n        // If the operation contains some mutations GET shouldn’t be used.\n        !operation.query.definitions.some(\n          (definition) =>\n            definition.kind === \"OperationDefinition\" &&\n            definition.operation === \"mutation\",\n        )\n      )\n        options.method = \"GET\";\n\n      if (options.method === \"GET\") {\n        const { newURI, parseError } = (0,_apollo_client_link_http_rewriteURIForGET_js__WEBPACK_IMPORTED_MODULE_7__.rewriteURIForGET)(uri, body);\n        if (parseError)\n          // Apollo’s `HttpLink` uses `fromError` for this, but it’s not\n          // exported from `@apollo/client/link/http`.\n          return new _apollo_client_utilities_observables_Observable_js__WEBPACK_IMPORTED_MODULE_8__.Observable((observer) => {\n            observer.error(parseError);\n          });\n        uri = newURI;\n      } else options.body = (0,_apollo_client_link_http_serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_6__.serializeFetchParameter)(clone, \"Payload\");\n    }\n\n    const { controller } = (0,_apollo_client_link_http_createSignalIfSupported_js__WEBPACK_IMPORTED_MODULE_9__.createSignalIfSupported)();\n\n    if (typeof controller !== \"boolean\") {\n      if (options.signal)\n        // Respect the user configured abort controller signal.\n        options.signal.aborted\n          ? // Signal already aborted, so immediately abort.\n            controller.abort()\n          : // Signal not already aborted, so setup a listener to abort when it\n            // does.\n            options.signal.addEventListener(\n              \"abort\",\n              () => {\n                controller.abort();\n              },\n              {\n                // Prevent a memory leak if the user configured abort controller\n                // is long lasting, or controls multiple things.\n                once: true,\n              },\n            );\n\n      options.signal = controller.signal;\n    }\n\n    const runtimeFetch = customFetch || fetch;\n\n    return new _apollo_client_utilities_observables_Observable_js__WEBPACK_IMPORTED_MODULE_8__.Observable((observer) => {\n      /**\n       * Is the observable being cleaned up.\n       * @type {boolean}\n       */\n      let cleaningUp;\n\n      runtimeFetch(uri, options)\n        .then((response) => {\n          // Forward the response on the context.\n          operation.setContext({ response });\n          return response;\n        })\n        .then((0,_apollo_client_link_http_parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_10__.parseAndCheckHttpResponse)(operation))\n        .then((result) => {\n          observer.next(result);\n          observer.complete();\n        })\n        .catch((error) => {\n          // If the observable is being cleaned up, there is no need to call\n          // next or error because there are no more subscribers. An error after\n          // cleanup begins is likely from the cleanup function aborting the\n          // fetch.\n          if (!cleaningUp) {\n            // For errors such as an invalid fetch URI there will be no GraphQL\n            // result with errors or data to forward.\n            if (error.result && error.result.errors && error.result.data)\n              observer.next(error.result);\n\n            observer.error(error);\n          }\n        });\n\n      // Cleanup function.\n      return () => {\n        cleaningUp = true;\n\n        // Abort fetch. It’s ok to signal an abort even when not fetching.\n        if (typeof controller !== \"boolean\") controller.abort();\n      };\n    });\n  });\n}\n\n/**\n * Checks if a value is an extractable file.\n * @template [ExtractableFile=any] Extractable file.\n * @callback ExtractableFileMatcher\n * @param {unknown} value Value to check.\n * @returns {value is ExtractableFile} Is the value an extractable file.\n * @example\n * How to check for the default exactable files, as well as a custom type of\n * file:\n *\n * ```js\n * import isExtractableFile from \"apollo-upload-client/isExtractableFile.mjs\";\n *\n * const isExtractableFileEnhanced = (value) =>\n *   isExtractableFile(value) ||\n *   (typeof CustomFile !== \"undefined\" && value instanceof CustomFile);\n * ```\n */\n\n/**\n * Appends a file extracted from the GraphQL operation to the\n * [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n * instance used as the\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch)\n * `options.body` for the\n * [GraphQL multipart request](https://github.com/jaydenseric/graphql-multipart-request-spec).\n * @template [ExtractableFile=any] Extractable file.\n * @callback FormDataFileAppender\n * @param {FormData} formData\n *   [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n *   instance to append the specified file to.\n * @param {string} fieldName Form data field name to append the file with.\n * @param {ExtractableFile} file File to append. The file type depends on what\n *   the extractable file matcher extracts.\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/apollo-upload-client/createUploadLink.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/apollo-upload-client/formDataAppendFile.mjs":
/*!**********************************************************************!*\
  !*** ../../node_modules/apollo-upload-client/formDataAppendFile.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ formDataAppendFile)\n/* harmony export */ });\n// @ts-check\n\n/**\n * The default implementation for the function `createUploadLink` option\n * `formDataAppendFile` that uses the standard {@linkcode FormData.append}\n * method.\n * @param {FormData} formData Form data to append the specified file to.\n * @param {string} fieldName Field name for the file.\n * @param {import(\"./isExtractableFile.mjs\").ExtractableFile} file File to\n *   append.\n */\nfunction formDataAppendFile(formData, fieldName, file) {\n  \"name\" in file\n    ? formData.append(fieldName, file, file.name)\n    : formData.append(fieldName, file);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL2Fwb2xsby11cGxvYWQtY2xpZW50L2Zvcm1EYXRhQXBwZW5kRmlsZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUVBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQSxXQUFXLFVBQVU7QUFDckIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsbURBQW1EO0FBQzlEO0FBQ0E7QUFDZTtBQUNmO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uLy4uL25vZGVfbW9kdWxlcy9hcG9sbG8tdXBsb2FkLWNsaWVudC9mb3JtRGF0YUFwcGVuZEZpbGUubWpzP2NlYmEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQHRzLWNoZWNrXG5cbi8qKlxuICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gZm9yIHRoZSBmdW5jdGlvbiBgY3JlYXRlVXBsb2FkTGlua2Agb3B0aW9uXG4gKiBgZm9ybURhdGFBcHBlbmRGaWxlYCB0aGF0IHVzZXMgdGhlIHN0YW5kYXJkIHtAbGlua2NvZGUgRm9ybURhdGEuYXBwZW5kfVxuICogbWV0aG9kLlxuICogQHBhcmFtIHtGb3JtRGF0YX0gZm9ybURhdGEgRm9ybSBkYXRhIHRvIGFwcGVuZCB0aGUgc3BlY2lmaWVkIGZpbGUgdG8uXG4gKiBAcGFyYW0ge3N0cmluZ30gZmllbGROYW1lIEZpZWxkIG5hbWUgZm9yIHRoZSBmaWxlLlxuICogQHBhcmFtIHtpbXBvcnQoXCIuL2lzRXh0cmFjdGFibGVGaWxlLm1qc1wiKS5FeHRyYWN0YWJsZUZpbGV9IGZpbGUgRmlsZSB0b1xuICogICBhcHBlbmQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1EYXRhQXBwZW5kRmlsZShmb3JtRGF0YSwgZmllbGROYW1lLCBmaWxlKSB7XG4gIFwibmFtZVwiIGluIGZpbGVcbiAgICA/IGZvcm1EYXRhLmFwcGVuZChmaWVsZE5hbWUsIGZpbGUsIGZpbGUubmFtZSlcbiAgICA6IGZvcm1EYXRhLmFwcGVuZChmaWVsZE5hbWUsIGZpbGUpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/apollo-upload-client/formDataAppendFile.mjs\n");

/***/ })

};
;